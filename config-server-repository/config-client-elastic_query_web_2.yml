# I created this copy of web service to demonstrate single-sign-on:
# Multiple clients under then same realm can use single-sign-on. If we have logged into one service, we can be automatically logged into the other.
# Authorization server directly returns authorization code without asking for user's credentials in this case.
# Because it sees there is an active session for this realm.
# For this to work, the two clients must be in the same browser.
server:
  port: 8185
  servlet:
    context-path: /elastic-query-web-client

elastic-query-web-client:
  webclient:
    connect-timeout-ms: 10000
    read-timeout-ms: 10000
    write-timeout-ms: 10000
    max-in-memory-size: 10485760 # 10MB
    content-type: 'application/vnd.api.v1+json'
    accept-type: 'application/vnd.api.v1+json'
    # base-url refer to the service-id so we can use client side load balancing.
    base-url: 'http://gateway-service/elastic-query-service/documents'
#    service-id: elastic-query-service
#    instances:
#      -
#        id: elastic-query-service-1
#        host: localhost
#        port: 8183
#      -
#        id: elastic-query-service-1
#        host: localhost
#        port: 8186
  query-by-text:
    method: POST
    uri: "/get-document-by-text"
    # using ${} to refer to a previously defined property in this sheet.
    accept: ${elastic-query-web-client.webclient.accept-type}

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: 'elastic-query-web-client-2'
            # find this client-secret from keycloak, under Client entity, select elastic-query-web-client
            client-secret: '{cipher}314c72f5adcde5a718ae0b7b32456564ba62233e35d5cda8f73f36c362da66073d952c361fee2fb0c6f87b188226bf29f1e7819286253d6b34b4597b2e753c0a'
            authorization-grant-type: authorization_code
            # base url is also configured in keycloak. we configured it to http://localhost:8184/elastic-query-web-client
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            # Setting scope to openid makes the oauth flow to support openid by returning an ID token along with access token.
            scope: openid
        provider:
          keycloak:
            # Spring Security 5 automatically configures an OAuth2 client as far as the issuerUri is specified.
            issuerUri: http://localhost:9091/auth/realms/microservices-realm


security:
  logout-success-url: http://localhost:8185/elastic-query-web-client
  default-client-registration-id: keycloak

user-config:
  username: test
  password: '{cipher}32b12dc398d01380c7de35e530bbe8df5b04d2850ed794227da98b0ee8e0b956'
  roles: USER