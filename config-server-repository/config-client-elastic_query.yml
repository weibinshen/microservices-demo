elastic-query-service:
  version: v1
  custom-audience: elastic-query-service
  # Making elastic query service also a client as it will need to access kafka streams service
  webclient:
    connect-timeout-ms: 10000
    read-timeout-ms: 10000
    write-timeout-ms: 10000
    max-in-memory-size: 10485760 # 10MB
    content-type: 'application/vnd.api.v1+json'
    accept-type: 'application/vnd.api.v1+json'
    # This property is configured by the Enum values defined in
    # com.microservices.demo.elastic.query.service.QueryType
    query-type: 'ANALYTICS_DATABASE'
  query-from-kafka-state-store:
    method: GET
    # Discovery service will do the load balancing, by forwarding the request to the service with the same name but different ports
    uri: "http://gateway-service/kafka-streams-service/get-word-count-by-word/{word}"
    accept: ${elastic-query-service.webclient.accept-type}
  query-from-analytics-database:
    method: GET
    uri: "http://gateway-service/analytics-service/get-word-count-by-word/{word}"
    accept: ${elastic-query-service.webclient.accept-type}

server:
  port: 8183
  servlet:
    context-path: /

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9091/auth/realms/microservices-realm
          # for loading public key in order to validate what's signed by the private key.
          jwk-set-uri: http://localhost:9091/auth/realms/microservices-realm/protocol/openid-connect/certs
      client:
        registration:
          keycloak:
            client-id: 'elastic-query-service'
            client-secret: '{cipher}280cabe4d84c82d0db7c445489d8982a4fe0493faad724e7a95524ddc08e18ea9b2d47b58fe5384d0b4437d0eee2a3ee9fc0b097197e86c2206f9c811405c67f'
            # This this is a machine to machine communication between two microservices.
            # We do not use authorization code flow, we use client credentials flow
            authorizationGrantType: client_credentials
        provider:
          keycloak:
            tokenUri: http://localhost:9091/auth/realms/microservices-realm/protocol/openid-connect/token
  jpa:
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
  datasource:
    # use public schema and binaryTransfer for better performance
    # reWriteBatchedInserts=true will allow all SQL inserts within one transaction to be sent in batches.
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true
    username: postgres
    password: '{cipher}<encrypted password>'
    driver-class-name: org.postgresql.Driver
    platform: postgres
    schema: classpath:init-schema.sql
    data: classpath:init-data.sql
    # For demo purpose, we re-run the SQL files each time when the DB starts.
    initialization-mode: always

elastic-query-config:
  text-field: text

elastic-config:
  index-name: twitter-index
  connection-url: http://localhost:9200
  connect-timeout-ms: 5000
  socket-timeout-ms: 30000

# Normally these information should come from a persistent store or LDAP
# But just for simplicity here we add these from the configuration file.
user-config:
  username: test
  password: '{cipher}c9f92fb46a46ef237e51c5d3af40d6c110ca8b0e71706bf23ff11c49b0038f0c'
  roles: USER

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

security:
  # There is no wildcard in this path, so sub-paths of /api-docs are still security-guarded.
  paths-to-ignore: /api-docs, /actuator/**

management:
  endpoints:
    web:
      base-path: /actuator
      exposure.include: health, prometheus
      path-mapping.prometheus: metrics
  endpoint:
    health:
      show-details: always
    prometheus:
      cache.time-to-live: 1ms