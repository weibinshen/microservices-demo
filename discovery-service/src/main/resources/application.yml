# We use this yml file when we want to run two instances to increase availability

# The discovery service do not need a bash script to be the entry point,
# Because the discovery client and eureka server are both managed by spring library,
# and there is a retry mechanism to successfully connect to eureka server from any service when each component is up and running.

eureka:
  client:
    # IMPORTANT:
    # It looks like what's in application-singleserver.yml won't override what's defined here
    # So if we were to run a single instance from IDE, we need to manually set these two values to false.

    # register this server itself, as well as its peers as a client.
    register-with-eureka: true
    # we have multiple Eureka server nodes acting together as peer registries.
    # When a Eureka server starts up, (by default) it searches for other peer registries, as we set it to true.
    fetch-registry: true
  instance:
    appname: service-registry-cluster
  server:
    # Do not try to recover if no heartbeat from client, just evict.
    # By default Eureka will wait longer before declaring a client dead for higher resiliency
    enable-self-preservation: false
    expected-client-renewal-interval-seconds: 3
    # Discovery service will check reachability of services every 2 seconds.
    # If not reachable, as configured above, evict immediately.
    eviction-interval-timer-in-ms: 2000

spring:
  cloud:
    loadbalancer:
      ribbon:
        # Client Side Load Balancer: Ribbon
        # Since we use Spring Cloud load balancer, we set this to false.
        enabled: false
  profiles:
    # We use the single server config (i.e. application-singleserver.yml) by default
    # This can be overridden in services.yml file when run with docker.
    active: singleserver


---
server:
  port: 8761
spring:
  profiles: peer1
eureka:
  instance:
    hostname: discovery-service-1
    metadataMap:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    serviceUrl:
      # With defaultZone property,
      # we created a cluster and specified we will use two instances.
      # And also we let each instance to find each other
      defaultZone: http://discovery-service-1:8761/eureka/,http://discovery-service-2:8762/eureka/

---
server:
  port: 8762
spring:
  profiles: peer2
eureka:
  instance:
    hostname: discovery-service-2
    metadataMap:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    serviceUrl:
      defaultZone: http://discovery-service-2:8762/eureka/,http://discovery-service-1:8761/eureka/
